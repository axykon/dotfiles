set hidden
set tabstop=4
set shiftwidth=4
set expandtab
set updatetime=300
set ttimeoutlen=50
set nowrap
set fillchars=vert:\│
set number
set signcolumn=number
set incsearch
set ignorecase
set smartcase
set path=.,,
set wildmenu
if has('popupwin')
  set wildoptions=pum
endif
set laststatus=2
set noshowmode
set belloff=all
set scrolloff=3
set hlsearch
set completeopt=menu,menuone
set mouse=a

nnoremap <space> <nop>
map <space> <leader>
nnoremap <C-l> :noh<CR><C-l>

let plug_path = glob('~/.vim/autoload/plug.vim')
if empty(plug_path)
  silent execute '!curl -fLo ' .. plug_path .. ' --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'junegunn/vim-plug'
Plug 'airblade/vim-gitgutter'
Plug 'arcticicestudio/nord-vim'
Plug 'tpope/vim-vinegar'
Plug 'stephpy/vim-yaml'
Plug 'vim/killersheep'
Plug 'towolf/vim-helm'
Plug 'airblade/vim-rooter'
Plug 'aymericbeaumet/vim-symlink'
Plug 'itchyny/lightline.vim'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/goyo.vim'
Plug 'ryanoasis/vim-devicons'
Plug 'sainnhe/sonokai'
Plug 'sainnhe/everforest'
Plug 'sainnhe/edge'
Plug 'sainnhe/gruvbox-material'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'rbong/vim-flog', { 'branch': 'v1' }
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-dadbod'
Plug 'junegunn/gv.vim'
Plug 'vim-test/vim-test'
Plug 'voldikss/vim-floaterm'
Plug 'Yggdroot/indentLine'
Plug 'catppuccin/vim', { 'as': 'catppuccin' }
Plug 'hashivim/vim-terraform'
Plug 'aklt/plantuml-syntax'
Plug 'tyru/open-browser.vim'
Plug 'weirongxu/plantuml-previewer.vim'
" Plug 'hrsh7th/vim-vsnip'
" Plug 'hrsh7th/vim-vsnip-integ'
Plug 'ghifarit53/tokyonight-vim'
Plug 'jasonccox/vim-wayland-clipboard'
Plug 'machakann/vim-highlightedyank'
Plug 'liuchengxu/graphviz.vim'
" Plug 'habamax/vim-dir'
Plug 'preservim/tagbar'
" Plug 'yegappan/lsp'
Plug 'dense-analysis/ale'
Plug 'ayu-theme/ayu-vim'
call plug#end()

if has('termguicolors')
  set termguicolors
endif

if index(["tmux-256color", "foot"],  &term) != -1
    let &t_8f = "\<Esc>[38:2:%lu:%lu:%lum"
    let &t_8b = "\<Esc>[48:2:%lu:%lu:%lum"

    " Handle focus events
    let &t_fe = "\<Esc>[?1004h"
    let &t_fd = "\<Esc>[?1004l"
    execute "set <FocusGained>=\<Esc>[I"
    execute "set <FocusLost>=\<Esc>[O"
endif

if index(["xterm-kitty", "tmux-256color", "alacritty", "xterm-256color", "foot"], &term) != -1
    let &t_SI .= "\<Esc>[6 q"
    let &t_EI .= "\<Esc>[2 q"
endif

if &term == 'xterm-kitty'
    let &t_ut=''
endif

let g:sonokai_style = 'andromeda'
let g:sonokai_spell_foreground = 'colored'
let g:lightline = {
\   'active': {
\     'left': [[ 'mode', 'paste'],
\              [ 'gitbranch', 'readonly', 'modified' ]]
\   },
\   'component_function': {
\     'gitbranch': 'FugitiveHead',
\   }
\ }

autocmd! FocusGained * call lightline#update()

function s:update_status_colors()
  let g:lightline.colorscheme = substitute(g:colors_name, '-', '_', '')
  call lightline#disable()
  call lightline#enable()
  highlight link lscDiagnosticError ErrorMsg
  highlight link lscDiagnosticWarning WarningMsg
endfunction

augroup Colors
  au!
  autocmd ColorScheme * call s:update_status_colors()
augroup end

set background=dark
" let g:sonokai_style = 'shusia'
colorscheme ayu

runtime ftplugin/man.vim

let test#strategy = 'vimterminal'
nnoremap <leader>tn :TestNearest<cr>
nnoremap <leader>tl :TestLast<cr>

" Fuzzy search
" let g:fzf_command_prefix = 'Fzf'
let g:fzf_layout = { 'down': '~30%' }
nnoremap <leader><space> :Buffers<cr>
nnoremap <leader>? :History<cr>
nnoremap <leader>g :GFiles<cr>

" Snippets support
" Expand
" imap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
" smap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'

" Expand or jump
" imap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
" smap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'

" Jump forward or backward
" imap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
" smap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
" imap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
" smap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'

" Select or cut text to use as $TM_SELECTED_TEXT in the next snippet.
" See https://github.com/hrsh7th/vim-vsnip/pull/50
" nmap        s   <Plug>(vsnip-select-text)
" xmap        s   <Plug>(vsnip-select-text)
" nmap        S   <Plug>(vsnip-cut-text)
" xmap        S   <Plug>(vsnip-cut-text)

" Indent lines
let g:indentLine_enabled = 0
nnoremap <silent> <leader>\| :IndentLinesToggle<CR>

" Highlight yanked text
let g:highlightedyank_highlight_duration = 300
let g:highlightedyank_highlight_in_visual = 0
highlight link HighlightedyankRegion IncSearch

" PlantUML
let g:plantuml_previewer#plantuml_jar_path = expand('~/.local/lib/java/plantuml.jar')
let g:plantuml_previewer#save_format = 'svg'

" File types
autocmd Filetype go set noexpandtab

autocmd BufNew,BufNewFile,BufRead */Jenkinsfile :setfiletype groovy

" LSP
" let lspServers = [
" 			\     {
"             \       'filetype': ['go'],
" 			\       'path': 'gopls',
" 			\     },
" 			\     {
" 			\        'filetype': ['rust'],
" 			\        'path': 'rustup',
" 			\        'args': ['run', 'stable', 'rust-analyzer'],
" 			\     },
"             \     {
"             \        'filetype': ['java'],
"             \        'path': expand('~/.local/lib/java/jdtls/bin/jdtls'),
"             \        'args': ['-data', expand('~/.local/cache/jdtls'),
"             \               '--jvm-arg=-javaagent:/home/axykon/.local/lib/java/lombok.jar'],
"             \      },
" 			\   ]
" let lspOpts = {
"             \ 'autoHighlightDiags': v:true,
"             \ 'autoPopulateDiags': v:true,
"             \ }
" autocmd VimEnter * 
"             \ call LspAddServer(lspServers) |
"             \ call LspOptionsSet(lspOpts)

" command! -nargs=+ LspHoverK :LspHover
" autocmd! User LspAttached setlocal tagfunc=lsp#lsp#TagFunc | setlocal keywordprg=:LspHoverK

" ALE
let g:ale_completion_enabled = 1
let g:ale_floating_preview = 1
let g:ale_floating_window_border = ['│', '─', '╭', '╮', '╯', '╰', '│', '─']
let g:ale_linters = {
			\ 'rust': ['analyzer'],
			\ }
let g:ale_rust_analyzer_executable = glob('`rustup which rust-analyzer`')

autocmd! User ALELSPStarted nmap K :ALEHover<CR>
