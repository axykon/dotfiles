set nocp
set hidden
set tabstop=4
set shiftwidth=4
set expandtab
set autoindent
set updatetime=300
set ttimeoutlen=50
set nowrap
set fillchars=vert:\│
set number
set signcolumn=number
set incsearch
set ignorecase
set smartcase
set path=.,,
set wildmenu
set wildoptions=pum
set laststatus=2
set showtabline=1
set belloff=all
set scrolloff=3
set hlsearch
set completeopt=menu,menuone
set mouse=a
set background=dark
if has('termguicolors')
  set termguicolors
endif

if has('win32')
  set shell=pwsh
endif

" Cursor shape
let &t_SI .= "\<Esc>[6 q"
let &t_EI .= "\<Esc>[2 q"
set t_ut=

filetype on
syntax on


nnoremap <space> <nop>
map <space> <leader>
nnoremap <C-l> :noh<CR><C-l>

" https://github.com/k-takata/minpac?tab=readme-ov-file#installation
packadd minpac

call minpac#init()

call minpac#add('k-takata/minpac', {'type': 'opt'})
call minpac#add('tpope/vim-fugitive')
call minpac#add('tpope/vim-commentary')
call minpac#add('yegappan/lsp')
call minpac#add('godlygeek/tabular')
call minpac#add('preservim/vim-markdown')
call minpac#add('girishji/scope.vim')
" call minpac#add('itchyny/lightline.vim')
call minpac#add('catppuccin/vim', {'name': 'catppuccin'})
call minpac#add('tpope/vim-vinegar')
call minpac#add('tpope/vim-dadbod', {'type': 'opt'})
call minpac#add('vim-test/vim-test')
call minpac#add('sainnhe/gruvbox-material')
call minpac#add('morhetz/gruvbox')
call minpac#add('vim-scripts/DrawIt', {'type': 'opt'})

colorscheme catppuccin_mocha

" Status Line
" let g:lightline = {
"     \   'colorscheme': 'rosepine',
"     \   'active': {
"     \     'left': [[ 'mode', 'paste' ],
"     \              [ 'readonly', 'filename', 'modified' ]]
"     \   },
"     \ }

" LSP
let lspServers = []
if executable('typescript-language-server')
    let lspServers = lspServers->add({
                \   'filetype': ['javascript', 'typescript'],
                \   'path': 'typescript-language-server',
                \   'args': ['--stdio', '--log-level', '4'],
                \ })
endif
if executable('gopls')
	let lspServers = lspServers->add({
				\   'filetype': ['go', 'gomod'],
				\   'path': 'gopls',
				\   'rootSearch': ['go.work', 'go.mod', '.git/'],
				\   'syncInit': v:true,
				\ })
endif

if executable('rust-analyzer')
	let lspServers = lspServers->add({
				\   'filetype': ['rust'],
				\   'path': 'rustup',
				\   'args': ['run', 'stable', 'rust-analyzer'],
				\   'syncInit': v:true,
				\ })
endif


if executable('jdtls')
    let lspServers = lspServers->add({
                \   'filetype': ['java'],
                \   'path': 'jdtls',
                \   'args': [
                \     '-data', expand('~/.local/cache/jdtls'),
                \     '--jvm-arg=-javaagent:' .. expand('~/.local/lib/java/lombok.jar'),
                \   ],
                \ })
endif

let lspOpts = {
            \ 'autoHighlightDiags': v:true,
            \ 'autoPopulateDiags': v:true,
			\ 'highlightDiagInline': v:true,
			\ 'autoComplete': v:true,
			\ 'echoSignature': v:false,
			\ 'showDiagWithVirtualText': v:true,
			\ 'diagVirtualTextAlign': 'below',
			\ 'showDiagInPopup': v:true,
			\ 'outlineWinSize': 50,
            \ 'usePopupInCodeAction': v:true,
            \ 'popupBorder': v:true,
            \ 'popupBorderHighlight': 'Normal',
            \ 'popupHighlight': 'Normal',
            \ 'popupBorderChars': ['─', '│', '─', '│', '┌', '┐', '┘', '└'],
            \ }

autocmd VimEnter * 
    \ call LspAddServer(lspServers) |
    \ call LspOptionsSet(lspOpts)

autocmd! User LspAttached setlocal tagfunc=lsp#lsp#TagFunc | setlocal keywordprg=:LspHover

nnoremap    nnoremap   nnoremap <leader>e :LspDiagCurrent<cr>
nnoremap <leader>a :LspCodeAction<cr>
nnoremap <leader>o <cmd>LspDocumentSymbol<cr>


" highlight LspCompletionPopup guibg=NONE ctermbg=NONE
" highlight LspCompletionPopupBorder guibg=NONE ctermbg=NONE
" let g:LspCompletionPopupBorderhighlight = ['LspCompletionPopupBorder']
" let g:LspCompletionPopupBorder = [1, 1, 1, 1]
" let g:LspCompletionPopupBorderchars = ['─', '│', '─', '│', '╭', '╮', '╯', '╰']
" 
" highlight LspHoverPopup guibg=NONE ctermbg=NONE
" highlight LspHoverPopupBorder guibg=NONE ctermbg=NONE
" let g:LspHoverPopupBorderhighlight = ['LspHoverPopupBorder']
" let g:LspHoverPopupBorder = []
" let g:LspHoverPopupBorderchars = ['─', '│', '─', '│', '┌', '┐', '┘', '└']
" 
" highlight LspPeekPopup guibg=NONE ctermbg=NONE
" highlight LspPeekPopupBorder guibg=NONE ctermbg=NONE
" let g:LspPeekPopupBorderhighlight = ['LspPeekPopupBorder']
" let g:LspPeekPopupBorder = []
" let g:LspPeekPopupBorderchars = ['─', '│', '─', '│', '╭', '╮', '╯', '╰']
" 
" highlight LspSymbolMenuPopup guibg=NONE ctermbg=NONE
" highlight LspSymbolMenuPopupBorder guibg=NONE ctermbg=NONE
" let g:LspSymbolMenuPopupBorderhighlight = ['LspSymbolMenuPopupBorder']
" let g:LspSymbolMenuPopupBorder = []
" let g:LspSymbolMenuPopupBorderchars = ['─', '│', '─', '│', '╭', '╮', '╯', '╰']
" 
" highlight link LspSignatureHelpPopup Pmenu
" highlight LspSignatureHelpPopupBorder guibg=NONE ctermbg=NONE
" let g:LspSignatureHelpPopupBorderhighlight = ['LspSignatureHelpPopupBorder']
" let g:LspSignatureHelpPopupBorder = [0, 0, 0, 0]
" let g:LspSignatureHelpPopupBorderchars = ['─', '│', '─', '│', '╭', '╮', '╯', '╰']
" 
" highlight LspTypeHierarchyPopup guibg=NONE ctermbg=NONE
" highlight LspTypeHierarchyPopupBorder guibg=NONE ctermbg=NONE
" let g:LspTypeHierarchyPopupBorderhighlight = ['LspTyperHierarchyPopupBorder']
" let g:LspTypeHierarchyPopupBorder = []
" let g:LspTypeHierarchyPopupBorderchars = ['─', '│', '─', '│', '╭', '╮', '╯', '╰']
