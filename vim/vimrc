set hidden
set tabstop=4
set shiftwidth=4
set expandtab
set updatetime=300
set ttimeoutlen=50
set nowrap
set fillchars=vert:\│
set number
set signcolumn=number
set incsearch
set ignorecase
set smartcase
set path=.,,
set wildmenu
if has('popupwin')
  set wildoptions=pum
endif
set laststatus=2
set noshowmode
set belloff=all
set scrolloff=3
set hlsearch
set completeopt=menu,menuone
set mouse=a

nnoremap <space> <nop>
map <space> <leader>
nnoremap <C-l> :noh<CR><C-l>

if empty(glob('~/.vim/autoload/plug.vim'))
  silent execute '!curl -fLo ' .. expand('~/.vim/autoload/plug.vim') .. ' --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

let g:lsp_provider = 'lsp'

call plug#begin('~/.vim/plugged')
Plug 'junegunn/vim-plug'
Plug 'airblade/vim-gitgutter'
Plug 'arcticicestudio/nord-vim'
Plug 'tpope/vim-vinegar'
Plug 'stephpy/vim-yaml'
Plug 'vim/killersheep'
Plug 'towolf/vim-helm'
Plug 'airblade/vim-rooter'
Plug 'aymericbeaumet/vim-symlink'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/goyo.vim'
Plug 'ryanoasis/vim-devicons'
Plug 'sainnhe/sonokai'
Plug 'sainnhe/everforest'
Plug 'sainnhe/edge'
Plug 'sainnhe/gruvbox-material'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-dadbod'
Plug 'junegunn/gv.vim'
Plug 'vim-test/vim-test'
Plug 'voldikss/vim-floaterm'
Plug 'Yggdroot/indentLine'
Plug 'catppuccin/vim', { 'as': 'catppuccin' }
Plug 'hashivim/vim-terraform'
Plug 'aklt/plantuml-syntax'
Plug 'tyru/open-browser.vim'
Plug 'weirongxu/plantuml-previewer.vim'
Plug 'ghifarit53/tokyonight-vim'
Plug 'jasonccox/vim-wayland-clipboard'
Plug 'machakann/vim-highlightedyank'
Plug 'liuchengxu/graphviz.vim'
Plug 'preservim/tagbar'
Plug 'yegappan/lsp', lsp_provider == 'lsp' ? {} : { 'on' : [] }
Plug 'dense-analysis/ale', lsp_provider == 'ale' ? {} : { 'on': [] }
Plug 'ayu-theme/ayu-vim'
Plug 'godlygeek/tabular'
Plug 'preservim/vim-markdown'
Plug 'rafi/awesome-vim-colorschemes'
call plug#end()

if has('termguicolors')
  set termguicolors
endif

if index(["tmux-256color", "foot"],  &term) != -1
    let &t_8f = "\<Esc>[38:2:%lu:%lu:%lum"
    let &t_8b = "\<Esc>[48:2:%lu:%lu:%lum"

    " Handle focus events
    let &t_fe = "\<Esc>[?1004h"
    let &t_fd = "\<Esc>[?1004l"
    execute "set <FocusGained>=\<Esc>[I"
    execute "set <FocusLost>=\<Esc>[O"
endif

if index(["xterm-kitty", "tmux-256color", "alacritty", "xterm-256color", "foot"], &term) != -1
    let &t_SI .= "\<Esc>[6 q"
    let &t_EI .= "\<Esc>[2 q"
endif

if &term == 'xterm-kitty'
    let &t_ut=''
endif

let g:sonokai_style = 'andromeda'
let g:sonokai_spell_foreground = 'colored'

set background=dark
colorscheme PaperColor

runtime ftplugin/man.vim

" let test#strategy = 'vimterminal'
nnoremap <leader>tn :TestNearest<cr>
nnoremap <leader>tl :TestLast<cr>

" Fuzzy search
" let g:fzf_command_prefix = 'Fzf'
" let g:fzf_layout = { 'down': '~30%' }
nnoremap <leader><space> :Buffers<cr>
nnoremap <leader>? :History<cr>
nnoremap <leader>g :GFiles<cr>

" Indent lines
let g:indentLine_enabled = 0
nnoremap <silent> <leader>\| :IndentLinesToggle<CR>

" Highlight yanked text
let g:highlightedyank_highlight_duration = 300
let g:highlightedyank_highlight_in_visual = 0
highlight link HighlightedyankRegion IncSearch

" PlantUML
let g:plantuml_previewer#plantuml_jar_path = expand('~/.local/lib/java/plantuml.jar')
let g:plantuml_previewer#save_format = 'svg'

" File types
autocmd Filetype go set noexpandtab

autocmd BufNew,BufNewFile,BufRead */Jenkinsfile :setfiletype groovy

command Transparent highlight Normal guibg=NONE |
			\ highlight LineNr guibg=NONE |
			\ highlight EndOfBuffer guibg=NONE

" Rooter
let g:rooter_manual_only = 1

" LSP
let lspServers = [
			\     {
            \       'filetype': ['go', 'gomod'],
			\       'path': 'gopls',
            \       'rootSearch': ['go.mod'],
			\	    'syncInit': v:true,
			\     },
			\     {
			\        'filetype': ['rust'],
			\        'path': 'rustup',
			\        'args': ['run', 'stable', 'rust-analyzer'],
            \        'syncInit': v:true,
			\     },
            \     {
            \        'filetype': ['java'],
            \        'path': expand('~/.local/lib/java/jdtls/bin/jdtls'),
            \        'args': ['-data', expand('~/.local/cache/jdtls'),
            \               '--jvm-arg=-javaagent:/home/axykon/.local/lib/java/lombok.jar'],
            \      },
			\   ]
let lspOpts = {
            \ 'autoHighlightDiags': v:true,
            \ 'autoPopulateDiags': v:true,
			\ 'highlightDiagInline': v:true,
			\ 'autoComplete': v:true,
			\ 'echoSignature': v:false,
            \ }

if lsp_provider == 'lsp'
    autocmd VimEnter * 
                \ call LspAddServer(lspServers) |
                \ call LspOptionsSet(lspOpts)

	command! -nargs=+ LspHoverK :LspHover
	autocmd! User LspAttached setlocal tagfunc=lsp#lsp#TagFunc | setlocal keywordprg=:LspHoverK
endif

" ALE
let g:ale_completion_enabled = 1
let g:ale_floating_preview = 1
let g:ale_floating_window_border = ['│', '─', '╭', '╮', '╯', '╰', '│', '─']
let g:ale_linters = {
			\ 'rust': ['analyzer'],
			\ }
let g:ale_rust_analyzer_executable = glob('`rustup which rust-analyzer`')
let g:ale_completion_symbols = {
			\ 'text': '',
			\ 'method': '',
			\ 'function': '',
			\ 'constructor': '',
			\ 'field': '',
			\ 'variable': '',
			\ 'class': '',
			\ 'interface': '',
			\ 'module': '',
			\ 'property': '',
			\ 'unit': 'v',
			\ 'value': 'v',
			\ 'enum': 't',
			\ 'keyword': 'v',
			\ 'snippet': 'v',
			\ 'color': 'v',
			\ 'file': 'v',
			\ 'reference': 'v',
			\ 'folder': 'v',
			\ 'enum_member': 'm',
			\ 'constant': 'm',
			\ 'struct': 't',
			\ 'event': 'v',
			\ 'operator': 'f',
			\ 'type_parameter': 'p',
			\ '<default>': 'v'
			\ }

autocmd! User ALELSPStarted 
			\ nmap K :ALEHover<CR> |
			\ nmap gd :ALEGoToDefinition<CR>
