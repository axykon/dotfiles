set encoding=utf-8
set hidden
set tabstop=2
set shiftwidth=2
set expandtab
set updatetime=300
set ttimeoutlen=50
set nowrap
set fillchars=vert:\â”‚
set number
set signcolumn=number
set incsearch
set path=.,,
set wildmenu
set wildoptions=pum
set nohlsearch
set laststatus=2
set noshowmode

nnoremap <space> <nop>
map <space> <leader>

let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'junegunn/vim-plug'
Plug 'airblade/vim-gitgutter'
Plug 'arcticicestudio/nord-vim'
Plug 'tpope/vim-vinegar'
Plug 'stephpy/vim-yaml'
Plug 'vim/killersheep'
Plug 'towolf/vim-helm'
Plug 'airblade/vim-rooter'
Plug 'aymericbeaumet/vim-symlink'
Plug 'itchyny/lightline.vim'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/goyo.vim'
Plug 'ryanoasis/vim-devicons'
Plug 'sainnhe/sonokai'
Plug 'sainnhe/everforest'
Plug 'sainnhe/edge'
Plug 'sainnhe/gruvbox-material'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'junegunn/gv.vim'
Plug 'vim-test/vim-test'
Plug 'voldikss/vim-floaterm'
Plug 'Yggdroot/indentLine'
Plug 'catppuccin/vim', { 'as': 'catppuccin' }
Plug 'hashivim/vim-terraform'
Plug 'hrsh7th/vim-vsnip'
Plug 'ghifarit53/tokyonight-vim'

function! Cond(cond, ...) abort
  let opts = get(a:000, 0, {})
  return a:cond ? opts : extend(opts, { 'on': [], 'for': [] })
endfunction

" Neovim only
Plug 'nvim-lua/plenary.nvim', Cond(has('nvim'))
Plug 'nvim-telescope/telescope.nvim', Cond(has('nvim'), {'tag': '0.1.0'})
Plug 'williamboman/mason.nvim', Cond(has('nvim'))
Plug 'neovim/nvim-lspconfig', Cond(has('nvim'))
Plug 'hrsh7th/nvim-cmp', Cond(has('nvim'))
Plug 'hrsh7th/cmp-nvim-lua', Cond(has('nvim'))
Plug 'hrsh7th/cmp-nvim-lsp', Cond(has('nvim'))
Plug 'hrsh7th/cmp-vsnip', Cond(has('nvim'))

" Vim only
Plug 'jasonccox/vim-wayland-clipboard', Cond(!has('nvim'))
Plug 'machakann/vim-highlightedyank', Cond(!has('nvim'))
Plug 'natebosch/vim-lsc', Cond(!has('nvim'))

call plug#end()

if has('termguicolors')
  set termguicolors
endif

if !has('nvim') 
  if index(["tmux-256color", "foot"],  &term) != -1
    let &t_8f = "\<Esc>[38:2:%lu:%lu:%lum"
    let &t_8b = "\<Esc>[48:2:%lu:%lu:%lum"

    " Handle focus events
    let &t_fe = "\<Esc>[?1004h"
    let &t_fd = "\<Esc>[?1004l"
    execute "set <FocusGained>=\<Esc>[I"
    execute "set <FocusLost>=\<Esc>[O"
  endif

  if index(["xterm-kitty", "tmux-256color", "alacritty", "xterm-256color", "foot"], &term) != -1
    let &t_SI .= "\<Esc>[6 q"
    let &t_EI .= "\<Esc>[2 q"
  endif

  if &term == 'xterm-kitty'
    let &t_ut=''
  endif
endif

let g:sonokai_style = 'andromeda'
let g:lightline = {
\   'active': {
\     'left': [[ 'mode', 'paste'],
\              [ 'cocstatus', 'gitbranch', 'readonly', 'modified' ]]
\   },
\   'component_function': {
\     'cocstatus': 'coc#status',
\     'gitbranch': 'FugitiveHead',
\   }
\ }

if !has('nvim')
  autocmd! FocusGained * call lightline#update()
endif

function s:update_status_colors()
  let g:lightline.colorscheme = substitute(g:colors_name, '-', '_', '')
  call lightline#disable()
  call lightline#enable()
endfunction

augroup Colors
  au!
  autocmd ColorScheme * call s:update_status_colors()
augroup end

set background=dark
colorscheme nord

runtime ftplugin/man.vim

let test#strategy = has('nvim') ? 'neovim' : 'vimterminal'
nnoremap <leader>tn :TestNearest<cr>
nnoremap <leader>tl :TestLast<cr>

" Fuzzy search
if has('nvim')
  nnoremap <leader><space> :Telescope buffers<cr>
  nnoremap <leader>? :Telescope oldfiles<cr>
  nnoremap <leader>g :Telescope git_files<cr>
else
  nnoremap <leader><space> :Buffers<cr>
  nnoremap <leader>? :History<cr>
  nnoremap <leader>g :GFiles<cr>
endif

" Snippets support
" Expand
imap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
smap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'

" Expand or jump
imap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
smap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'

" Jump forward or backward
imap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
smap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
imap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
smap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'

" Select or cut text to use as $TM_SELECTED_TEXT in the next snippet.
" See https://github.com/hrsh7th/vim-vsnip/pull/50
nmap        s   <Plug>(vsnip-select-text)
xmap        s   <Plug>(vsnip-select-text)
nmap        S   <Plug>(vsnip-cut-text)
xmap        S   <Plug>(vsnip-cut-text)

" Indent lines
let g:indentLine_enabled = 0
nnoremap <silent> <leader>\| :IndentLinesToggle<CR>

" Highlight yanked text
if has('nvim')
  augroup YankHighlight
    au!
    autocmd TextYankPost * lua vim.highlight.on_yank()
  augroup end
else
  let g:highlightedyank_highlight_duration = 300
  let g:highlightedyank_highlight_in_visual = 0
  highlight link HighlightedyankRegion IncSearch
endif

function! s:helptab()
  if &buftype == 'help'
    wincmd T
    nnoremap <buffer> q :q<cr>
  endif
endfunction
augroup vimrc
  autocmd BufEnter *.txt call s:helptab()
augroup end


" File types
autocmd Filetype go setlocal ts=4 sw=4 noexpandtab

autocmd BufNew,BufNewFile,BufRead */Jenkinsfile :setfiletype groovy

" LSP
if has('nvim')
  lua require("nvim-lsp-installer").setup{}

  function! NvimOnLspAttachBuf()
    " Not needed as nvim-cmp is used for completion
    " setlocal omnifunc=v:lua.vim.lsp.omnifunc

    nnoremap <buffer><silent> K :lua vim.lsp.buf.hover()<cr>
    nnoremap <buffer><silent> gd :lua vim.lsp.buf.definition()<cr>
    nnoremap <buffer><silent> <C-k> :lua vim.lsp.buf.signature_help()<cr>
    nnoremap <buffer><silent> <leader>rn :lua vim.lsp.buf.rename()<cr>
    nnoremap <buffer><silent> <leader>gr :lua vim.lsp.buf.references()<cr>
    nnoremap <buffer><silent> <leader>ca :lua vim.lsp.buf.code_action()<cr>
    nnoremap <buffer><silent> <leader>e :lua vim.diagnostic.open_float()<cr>
    nnoremap <buffer><silent> <leader>q :lua vim.diagnostic.setloclist()<cr>
    nnoremap <buffer><silent> <leader>gs :Telescope lsp_document_symbols theme=ivy<cr>
    nnoremap <buffer><silent> <leader>gS :Telescope lsp_dynamic_workspace_symbols theme=ivy<cr>

    command! Format execute 'lua vim.lsp.buf.formatting()'
  endfunction

lua <<EOF
  local on_attach = function(_, bufnr) vim.fn.NvimOnLspAttachBuf() end

  local capabilities = vim.lsp.protocol.make_client_capabilities()
  capabilities = require('cmp_nvim_lsp').update_capabilities(capabilities)

  local lspconfig = require('lspconfig')
  lspconfig.rust_analyzer.setup {
    on_attach = on_attach,
    capabilities = capabilities
  }
  lspconfig.gopls.setup { 
    on_attach = on_attach,
    capabilities = capabilities,
    settings = {
      gopls = {
        usePlaceholders = true
      }
    }
  }
  local cmp = require('cmp')
  cmp.setup {
    window = {
      documentation = {
        max_width = 120
      }
    },
    snippet = {
      expand = function(args)
        vim.fn["vsnip#anonymous"](args.body)
      end,
    },
    mapping = {
      ['<C-p>'] = cmp.mapping.select_prev_item(),
      ['<C-n>'] = cmp.mapping.select_next_item(),
      ['<C-d>'] = cmp.mapping.scroll_docs(-4),
      ['<C-f>'] = cmp.mapping.scroll_docs(4),
      ['<C-Space>'] = cmp.mapping.complete(),
      ['<C-e>'] = cmp.mapping.close(),
      ['<cr>'] = cmp.mapping.confirm {
        behavior = cmp.ConfirmBehavior.Replace,
        select = true,
      },
    },
    sources = {
      { name = 'luasnip' },
      { name = 'nvim_lsp' },
      { name = 'nvim_lua' },
    },
  }
EOF
else
  let g:lsc_server_commands = {
        \ 'go': {
          \ 'command': 'gopls serve',
          \ 'log_level': 'Info',
          \ 'suppress_stderr': v:false 
          \ },
        \ 'rust': {
          \ 'command': 'rust-analyzer',
          \ 'suppress_stderr': v:true
          \ },
        \ }
  let g:lsc_auto_map = v:true
  set completeopt-=preview
  highlight link lscDiagnosticError ErrorMsg
  highlight link lscDiagnosticWarning WarningMsg
endif
