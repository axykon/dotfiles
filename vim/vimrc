set encoding=utf-8
set hidden
set tabstop=4
set shiftwidth=4
set expandtab
set updatetime=300
set ttimeoutlen=50
set nowrap
set fillchars=vert:\â”‚
set number
set signcolumn=number
set incsearch
set path=.,,
set wildmenu
if has('popupwin')
  set wildoptions=pum
endif
set nohlsearch
set laststatus=2
set noshowmode
set belloff=all

nnoremap <space> <nop>
map <space> <leader>

let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'junegunn/vim-plug'
Plug 'airblade/vim-gitgutter'
Plug 'arcticicestudio/nord-vim'
Plug 'tpope/vim-vinegar'
Plug 'stephpy/vim-yaml'
Plug 'vim/killersheep'
Plug 'towolf/vim-helm'
Plug 'airblade/vim-rooter'
Plug 'aymericbeaumet/vim-symlink'
Plug 'itchyny/lightline.vim'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/goyo.vim'
Plug 'ryanoasis/vim-devicons'
Plug 'sainnhe/sonokai'
Plug 'sainnhe/everforest'
Plug 'sainnhe/edge'
Plug 'sainnhe/gruvbox-material'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-dadbod'
Plug 'junegunn/gv.vim'
Plug 'vim-test/vim-test'
Plug 'voldikss/vim-floaterm'
Plug 'Yggdroot/indentLine'
Plug 'catppuccin/vim', { 'as': 'catppuccin' }
Plug 'hashivim/vim-terraform'
" Plug 'hrsh7th/vim-vsnip'
" Plug 'hrsh7th/vim-vsnip-integ'
Plug 'ghifarit53/tokyonight-vim'
Plug 'jasonccox/vim-wayland-clipboard'
Plug 'machakann/vim-highlightedyank'
Plug 'liuchengxu/graphviz.vim'
" Plug 'habamax/vim-dir'
Plug 'natebosch/vim-lsc'
Plug 'preservim/tagbar'
Plug 'yegappan/lsp'
call plug#end()

if has('termguicolors')
  set termguicolors
endif

if index(["tmux-256color", "foot"],  &term) != -1
    let &t_8f = "\<Esc>[38:2:%lu:%lu:%lum"
    let &t_8b = "\<Esc>[48:2:%lu:%lu:%lum"

    " Handle focus events
    let &t_fe = "\<Esc>[?1004h"
    let &t_fd = "\<Esc>[?1004l"
    execute "set <FocusGained>=\<Esc>[I"
    execute "set <FocusLost>=\<Esc>[O"
endif

if index(["xterm-kitty", "tmux-256color", "alacritty", "xterm-256color", "foot"], &term) != -1
    let &t_SI .= "\<Esc>[6 q"
    let &t_EI .= "\<Esc>[2 q"
endif

if &term == 'xterm-kitty'
    let &t_ut=''
endif

let g:sonokai_style = 'andromeda'
let g:lightline = {
\   'active': {
\     'left': [[ 'mode', 'paste'],
\              [ 'cocstatus', 'gitbranch', 'readonly', 'modified' ]]
\   },
\   'component_function': {
\     'cocstatus': 'coc#status',
\     'gitbranch': 'FugitiveHead',
\   }
\ }

autocmd! FocusGained * call lightline#update()

function s:update_status_colors()
  let g:lightline.colorscheme = substitute(g:colors_name, '-', '_', '')
  call lightline#disable()
  call lightline#enable()
  highlight link lscDiagnosticError ErrorMsg
  highlight link lscDiagnosticWarning WarningMsg
endfunction

augroup Colors
  au!
  autocmd ColorScheme * call s:update_status_colors()
augroup end

set background=dark
colorscheme nord

runtime ftplugin/man.vim

let test#strategy = 'vimterminal'
nnoremap <leader>tn :TestNearest<cr>
nnoremap <leader>tl :TestLast<cr>

" Fuzzy search
nnoremap <leader><space> :Buffers<cr>
nnoremap <leader>? :History<cr>
nnoremap <leader>g :GFiles<cr>

" Snippets support
" Expand
" imap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
" smap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'

" Expand or jump
" imap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
" smap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'

" Jump forward or backward
" imap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
" smap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
" imap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
" smap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'

" Select or cut text to use as $TM_SELECTED_TEXT in the next snippet.
" See https://github.com/hrsh7th/vim-vsnip/pull/50
" nmap        s   <Plug>(vsnip-select-text)
" xmap        s   <Plug>(vsnip-select-text)
" nmap        S   <Plug>(vsnip-cut-text)
" xmap        S   <Plug>(vsnip-cut-text)

" Indent lines
let g:indentLine_enabled = 0
nnoremap <silent> <leader>\| :IndentLinesToggle<CR>

" Highlight yanked text
let g:highlightedyank_highlight_duration = 300
let g:highlightedyank_highlight_in_visual = 0
highlight link HighlightedyankRegion IncSearch

function! s:helptab()
  if &buftype == 'help'
    wincmd T
    nnoremap <buffer> q :q<cr>
  endif
endfunction
augroup vimrc
  autocmd BufEnter *.txt call s:helptab()
augroup end

" File types
autocmd Filetype go set noexpandtab

autocmd BufNew,BufNewFile,BufRead */Jenkinsfile :setfiletype groovy

" LSP
let lspServers = [
			\     #{
			\        filetype: ['go'],
			\        path: 'gopls',
			\      },
			\     #{
			\        filetype: ['rust'],
			\        path: 'rust-analyzer',
			\      }
			\   ]
autocmd VimEnter * call LspAddServer(lspServers)

let lspOpts = {'autoHighlightDiags': v:true}
autocmd VimEnter * call LspOptionsSet(lspOpts)

command -nargs=+ LspHover2 :LspHover

autocmd! User LspAttached setlocal tagfunc=lsp#lsp#TagFunc | setlocal keywordprg=:LspHover2
