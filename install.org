* Install Minikube
  #+begin_src sh :results output silent :var version="v1.5.2" :dir /sudo::
    curl -sL "https://github.com/kubernetes/minikube/releases/download/${version}/minikube-linux-amd64" \
        -o /usr/local/bin/minikube

    curl -sL "https://github.com/kubernetes/minikube/releases/download/${version}/docker-machine-driver-kvm2" \
        -o /usr/local/bin/docker-machine-driver-kvm2

    chmod 0755 /usr/local/bin/{minikube,docker-machine-driver-kvm2}
    minikube completion bash > /etc/bash_completion.d/_minikube
  #+end_src

  KVM requires a CPU with virtualization extensions, found on most
  consumer CPUs. These extensions are called Intel VT or AMD-V. To
  check whether you have CPU support, run the following command:
  #+begin_src sh :results output silent
    egrep '^flags.*(vmx|svm)' /proc/cpuinfo
  #+end_src

  Things to remember:
  #+begin_example sh
    sudo usermod -aG libvirt $USER
    minikube config set vm-driver kvm2
    systemctl start libvirtd
  #+end_example

* Install kubectl
  #+begin_src sh :results output silent :dir /sudo::
    curl -sL "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl" \
         -o /usr/local/bin/kubectl

    chmod 0755 /usr/local/bin/kubectl
    kubectl completion bash  > /etc/bash_completion.d/_kubectl
  #+end_src

* Install docker-compose
  #+begin_src sh :results output silent :dir /sudo::
    curl -sL "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)" \
         -o /usr/local/bin/docker-compose

    chmod 0755 /usr/local/bin/docker-compose
  #+end_src

* Helm
  #+begin_src sh :results output silent :dir /sudo::
    curl -sL "https://get.helm.sh/helm-v2.14.3-linux-amd64.tar.gz" \
        | tar -C /usr/local/bin -xz --strip-components=1 --mode=0755 \
              linux-amd64/helm linux-amd64/tiller
  #+end_src

* Fonts
** Install Go fonts
   #+begin_src sh :results output silent
     curl -sL "https://go.googlesource.com/image/+archive/master/font/gofont/ttfs.tar.gz" \
         | tar -C ~/.fonts -xz --mode=0644 --wildcards '*.ttf'
   #+end_src

** Set default monospace font
   #+name: font-list
   - Source Code Pro 14
   - Go Mono 14
   - Fira Mono Light 14
   - Fira Code 14
   - Iosevka 15
   - Liberation Mono 14

   #+name: select-font
   #+begin_src elisp :var fonts=font-list
     (ivy-read "select font: " fonts)
   #+end_src

   #+name: set-monospace-font
   #+begin_src sh :var font=select-font() :results output silent
     gsettings set org.gnome.desktop.interface monospace-font-name "$font"
   #+end_src
  
* IDEA
  :properties:
  :header-args: :var SCTL_FILE="/etc/sysctl.d/50-idea.conf"
  :header-args+: :dir /sudo:: :results output silent
  :end:

  #+name: check-max-user-watches
  #+begin_src sh
    echo -ne "File contents: "
    [[ -f $SCTL_FILE ]] && cat $SCTL_FILE || echo "---"
    echo -ne "Actual value: "
    sysctl fs.inotify.max_user_watches
  #+end_src

  #+name: set-max-user-watches
  #+begin_SRC sh
    cat > $SCTL_FILE <<EOF
    fs.inotify.max_user_watches = 524288
    EOF

    sysctl -p --system
  #+end_SRC

* Rpmfusion
  #+begin_src sh :dir /sudo:: :results output silent
    RELEASE=$(rpm -E %fedora)
    dnf install -y \
        https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$RELEASE.noarch.rpm \
        https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$RELEASE.noarch.rpm \
  #+end_src

