#+startup: overview

* Install minikube
  #+begin_src sh :results output silent :var version="v1.19.0"
    set -e
    mk=$HOME/.local/bin/minikube
    curl -Lf --no-progress-meter "https://github.com/kubernetes/minikube/releases/download/${version}/minikube-linux-amd64" \
         -o $mk
    chmod 0755 $mk
    bashcompdir=$HOME/.local/share/bash-completion/completions
    [[ -d $bashcompdir ]] || mkdir -p $bashcompdir
    bashcomp=$bashcompdir/_minikube
    $mk completion bash > $bashcomp
    chmod 0644 $bashcomp
  #+end_src

  #+name: minikube-config
  #+BEGIN_SRC sh :results output silent :var MEM=(read-from-minibuffer "Memory size (Gb): ")
    declare -A CONFIG=(
        [cpus]=4
        [memory]=$(( $MEM * 1024 ))
        [vm-driver]=docker
        [container-runtime]=docker
    )

    for K in ${!CONFIG[@]}; do
        minikube config set $K ${CONFIG[$K]}
    done
  #+END_SRC

  KVM requires a CPU with virtualization extensions, found on most
  consumer CPUs. These extensions are called Intel VT or AMD-V. To
  check whether you have CPU support, run the following command:
  #+begin_src sh :results output silent
    egrep '^flags.*(vmx|svm)' /proc/cpuinfo
  #+end_src

  Things to remember:
  #+begin_example sh
    sudo dnf install libvirt
    sudo usermod -aG libvirt $USER
    minikube config set vm-driver kvm2
    systemctl start libvirtd
  #+end_example

  To pull images from cloud repositories this minikube addon may help:
  #+begin_example
    minikube addons enable registry-creds
    minikube addons configure registry-creds
  #+end_example

* Install kind
  #+begin_src sh :var version="0.10.0" :results output silent
    set -e
    kind=$HOME/.local/bin/kind
    curl -sL https://kind.sigs.k8s.io/dl/v${version}/kind-linux-amd64 \
         -o $kind
    chmod 0755 $kind
    bashcompdir=$HOME/.local/share/bash-completion/completions
    [[ -d $bashcompdir ]] || mkdir -p $bashcompdir
    bashcomp=$bashcompdir/_kind
    kind completion bash  > $bashcomp
    chmod 0644 $bashcomp
  #+end_src

* Install kubectl
  #+begin_src sh :results output silent
    kubectl=$HOME/.local/bin/kubectl
    curl -sL "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl" \
         -o $kubectl
    chmod 0755 $kubectl

    bashcompdir=$HOME/.local/share/bash-completion/completions
    [[ -d $bashcompdir ]] || mkdir -p $bashcompdir
    bashcomp=$bashcompdir/_kubectl
    kubectl completion bash  > $bashcomp
    chmod 0644 $bashcomp
  #+end_src

* Install kustomize
  #+begin_src sh :var version="v3.8.5" :results output silent :dir /tmp
    set -e
    kustomize=$HOME/.local/bin/kustomize
    curl -L https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2F${version}/kustomize_${version}_linux_amd64.tar.gz \
        | tar -C $(dirname $kustomize) -xz --mode=0755 kustomize

    bashcompdir=$HOME/.local/share/bash-completion/completions
    [[ -d $bashcompdir ]] || mkdir -p $bashcompdir
    bashcomp=$bashcompdir/_kustomize
    echo 'complete -C kustomize kustomize' > $bashcomp
    chmod 0644 $bashcomp
  #+end_src

* Install scaffold
  #+begin_src sh :results output silent :var version="1.21.0" :dir /tmp
    set -e
    skaffold=$HOME/.local/bin/skaffold
    curl -Lo $skaffold https://storage.googleapis.com/skaffold/releases/v${version}/skaffold-linux-amd64
    chmod 0755 $skaffold

    bashcompdir=$HOME/.local/share/bash-completion/completions
    [[ -d $bashcompdir ]] || mkdir -p $bashcompdir
    bashcomp=$bashcompdir/_skaffold
    skaffold completion bash > $bashcomp
    chmod 0644 $bashcomp
  #+end_src

* Install helm
  #+begin_src sh :var version="v3.5.0" :results output silent
    set -e
    curl -sL "https://get.helm.sh/helm-$version-linux-amd64.tar.gz" \
        | tar -C $HOME/.local/bin -xz --strip-components=1 --mode=0755 \
              linux-amd64/helm

    bashcompdir=$HOME/.local/share/bash-completion/completions
    [[ -d $bashcompdir ]] || mkdir -p $bashcompdir
    bashcomp=$bashcompdir/_helm
    helm completion bash  > $bashcomp
    chmod 0644 $bashcomp

  #+end_src

* Install istio
  #+begin_src sh :var version="1.9.1" :results output silent :dir /tmp
    set -e
    [[ -d istio-$version ]] \
        || curl -sL "https://github.com/istio/istio/releases/download/$version/istio-$version-linux-amd64.tar.gz" \
            | tar -xz

    cd istio-$version
    install --mode=0755 bin/istioctl $HOME/.local/bin
    install --mode=0644 tools/istioctl.bash $HOME/.local/share/bash-completion/completions/_istioctl
    mkdir -p $HOME/.local/share/istio
    cp -r samples $HOME/.local/share/istio
  #+end_src
  Then run ~istioctl install --set profile=demo --set values.global.imagePullPolicy=IfNotPresent~

* Install k9s
  #+begin_src sh :var version="v0.24.2" :results output silent :dir /tmp
    set -e
    curl -L https://github.com/derailed/k9s/releases/download/${version}/k9s_Linux_x86_64.tar.gz \
        | tar -C ~/.local/bin -xz --mode=0755 k9s
  #+end_src
  
* Fonts
  :properties:
  :header-args: :results output silent
  :end:

** Install Go fonts
   #+begin_src sh
     curl -sL "https://go.googlesource.com/image/+archive/master/font/gofont/ttfs.tar.gz" \
         | tar -C ~/.fonts -xz --mode=0644 --wildcards '*.ttf'
   #+end_src

** Install FiraCode fonts
   #+begin_src sh
     TEMPFILE=$(mktemp fira-code-XXX.zip)
     curl -sL "https://github.com/tonsky/FiraCode/releases/download/2/FiraCode_2.zip" \
          -o $TEMPFILE
     rm -f ~/.fonts/FiraCode*.ttf
     unzip -jd ~/.fonts $TEMPFILE ttf/\*.ttf
   #+end_src

** Set default monospace font
   #+name: font-list
   - Source Code Pro
   - Go Mono
   - Fira Mono
   - Fira Mono Light
   - Fira Code
   - Fira Code Light
   - Iosevka
   - Liberation Mono

   #+name: select-font
   #+begin_src elisp :var fonts=font-list :results value
     (ivy-read "Font name: " fonts)
   #+end_src

   #+name: set-monospace-font
   #+begin_src sh :var font=select-font() size=(read-from-minibuffer "Font size: ") :results output silent
     gsettings set org.gnome.desktop.interface monospace-font-name "$font $size"
   #+end_src
  
* IDEA
  :properties:
  :header-args: :var SCTL_FILE="/etc/sysctl.d/50-idea.conf"
  :header-args+: :dir /sudo:: :results output silent
  :end:

  #+name: check-max-user-watches
  #+begin_src sh
    echo -ne "File contents: "
    [[ -f $SCTL_FILE ]] && cat $SCTL_FILE || echo "---"
    echo -ne "Actual value: "
    sysctl fs.inotify.max_user_watches
  #+end_src

  #+name: set-max-user-watches
  #+begin_SRC sh
    cat > $SCTL_FILE <<EOF
    fs.inotify.max_user_watches = 524288
    EOF

    sysctl -p --system
  #+end_SRC

* Rpmfusion
  #+begin_src sh :dir /sudo:: :results output silent
    RELEASE=$(rpm -E %fedora)
    dnf install -y \
        https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$RELEASE.noarch.rpm \
        https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$RELEASE.noarch.rpm \
  #+end_src

* F5
  https://support.f5.com/csp/article/K47922841
  <access-point>/public/download/linux_f5epi.x86_64.rpm
  <access-point>/public/download/linux_f5vpn.x86_64.rpm

